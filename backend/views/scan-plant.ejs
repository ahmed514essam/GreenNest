<!DOCTYPE html>
<html>
<head>
    <title>Scan Plant - PlantID</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
        }
        .form-container {
            background-color: #f5f5f5;
            padding: 20px;
            border-radius: 5px;
            text-align: center;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .upload-area {
            border: 2px dashed #4CAF50;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            cursor: pointer;
        }
        .upload-area:hover {
            background-color: #f0f0f0;
        }
        .highlight {
            border-color: #4CAF50;
        }
        .preview-image {
            max-width: 300px;
            margin-top: 10px;
            border-radius: 8px;
            display: none;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
        }
        button:hover {
            background-color: #45a049;
        }
        #uploadIcon {
            font-size: 48px;
            color: #4CAF50;
        }
        .loading {
            display: none;
            margin-top: 20px;
        }
        .error-message {
            color: #ff0000;
            margin-top: 10px;
            display: none;
        }
    </style>
</head>
<body>
    <h1>Scan Your Plant</h1>
    <div class="form-container">
        <form id="scanPlantForm" enctype="multipart/form-data">
            <div class="form-group">
                <input type="text" id="plantName" name="plantName" placeholder="Plant Name" required>
            </div>
            <div class="form-group">
                <input type="text" id="plantType" name="plantType" placeholder="Plant Type" required>
            </div>
            <div class="upload-area" id="uploadArea">
                <div id="uploadPrompt">
                    <div id="uploadIcon">ðŸ“¸</div>
                    <p>Click or drag and drop your plant image here</p>
                    <p style="font-size: 0.8em; color: #666;">Supported formats: JPG, PNG</p>
                </div>
                <img id="previewImage" class="preview-image" alt="Plant preview" />
            </div>
            <input type="file" id="plantImage" name="plantImage" accept="image/*" style="display: none;" required>
            <button type="submit" id="scanButton">Scan Plant</button>
        </form>
        <div class="loading" id="loadingIndicator">
            <p>Analyzing your plant...</p>
        </div>
        <div class="error-message" id="errorMessage"></div>
    </div>

    <script>
        // Wait for DOM to be fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Get DOM elements
            const uploadArea = document.getElementById('uploadArea');
            const fileInput = document.getElementById('plantImage');
            const previewImage = document.getElementById('previewImage');
            const form = document.getElementById('scanPlantForm');
            const loadingIndicator = document.getElementById('loadingIndicator');
            const errorMessage = document.getElementById('errorMessage');
            const uploadPrompt = document.getElementById('uploadPrompt');

            // Check if all required elements exist
            if (!uploadArea || !fileInput || !previewImage || !form || !loadingIndicator || !errorMessage || !uploadPrompt) {
                console.error('Missing required DOM elements');
                return;
            }

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            function handleFile(file) {
                if (!file) return;
                
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        previewImage.src = e.target.result;
                        previewImage.style.display = 'block';
                        uploadPrompt.style.display = 'none';
                    };
                    reader.readAsDataURL(file);
                } else {
                    showError('Please select an image file.');
                }
            }

            function showError(message) {
                if (errorMessage) {
                    errorMessage.textContent = message;
                    errorMessage.style.display = 'block';
                }
                if (loadingIndicator) {
                    loadingIndicator.style.display = 'none';
                }
            }

            // Prevent default drag behaviors
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                uploadArea.addEventListener(eventName, preventDefaults);
                document.body.addEventListener(eventName, preventDefaults);
            });

            // Handle click on upload area
            uploadArea.addEventListener('click', () => {
                fileInput.click();
            });

            // Highlight drop zone when item is dragged over it
            ['dragenter', 'dragover'].forEach(eventName => {
                uploadArea.addEventListener(eventName, () => {
                    uploadArea.classList.add('highlight');
                    uploadArea.style.backgroundColor = '#f0f0f0';
                });
            });

            ['dragleave', 'drop'].forEach(eventName => {
                uploadArea.addEventListener(eventName, () => {
                    uploadArea.classList.remove('highlight');
                    uploadArea.style.backgroundColor = '';
                });
            });

            // Handle dropped files
            uploadArea.addEventListener('drop', (e) => {
                const droppedFiles = e.dataTransfer.files;
                if (droppedFiles.length) {
                    handleFile(droppedFiles[0]);
                }
            });

            // Handle file input change
            fileInput.addEventListener('change', (e) => {
                if (e.target.files.length) {
                    handleFile(e.target.files[0]);
                }
            });

            // Handle form submission
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const plantNameInput = document.getElementById('plantName');
                const plantTypeInput = document.getElementById('plantType');
                
                if (!plantNameInput || !plantTypeInput) {
                    showError('Missing form fields');
                    return;
                }

                if (!plantNameInput.value.trim()) {
                    showError('Please enter a plant name');
                    plantNameInput.focus();
                    return;
                }

                if (!plantTypeInput.value.trim()) {
                    showError('Please enter a plant type');
                    plantTypeInput.focus();
                    return;
                }

                if (!fileInput.files || !fileInput.files[0]) {
                    showError('Please select an image');
                    return;
                }

                loadingIndicator.style.display = 'block';
                errorMessage.style.display = 'none';

                const formData = new FormData();
                formData.append('plantImage', fileInput.files[0]);
                formData.append('plantName', plantNameInput.value.trim());
                formData.append('plantType', plantTypeInput.value.trim());

                try {
                    const response = await fetch('/scan', {
                        method: 'POST',
                        body: formData
                    });

                    if (response.redirected) {
                        window.location.href = response.url;
                        return;
                    }

                    // Try to parse response as JSON
                    let data;
                    try {
                        data = await response.json();
                        if (!response.ok) {
                            throw new Error(data.message || 'Error scanning plant');
                        }
                    } catch (parseError) {
                        console.error('Response parsing error:', parseError);
                        throw new Error('Unexpected response from server');
                    }

                    // If we get here and haven't redirected, show error
                    throw new Error('Expected redirect but got JSON response');
                } catch (error) {
                    console.error('Scan error:', error);
                    showError(error.message);
                }
            });
        });
    </script>
</body>
</html>
